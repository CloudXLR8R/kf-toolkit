version: 2.1
orbs:
  aws-cli: circleci/aws-cli@1.3.1
  python: circleci/python@1.2.1
  shellcheck: circleci/shellcheck@2.2.2

commands:
  setup_precommit_hooks:
    description: Restore pre-commit hooks from cache
    steps:
      - restore_cache:
          keys:
            - v3-pre-commit-hooks-{{ checksum ".pre-commit-config.yaml" }}
      - run:
          name: Install pre-commit hooks
          command: pre-commit install
  save_precommit_hooks:
    description: Save the installed pre-commit hooks to the cache
    steps:
      - save_cache:
          key: v3-pre-commit-hooks-{{ checksum ".pre-commit-config.yaml" }}
          paths:
            - "~/.cache/pre-commit"

jobs:
  lint:
    executor: python/default
    steps:
      - checkout
      - python/install-packages:
          pkg-manager: pip
      - save_precommit_hooks
      - setup_precommit_hooks
      - shellcheck/install
      - run: pre-commit run --all-files --verbose --config .pre-commit-config.yaml

  package:
    working_directory: ~/app
    docker:
      - image: docker:17.09.0-ce-dind
    parameters:
      repo:
        type: string
        description: repo name to create in registry (usually same as github repo name)
      registry:
        type: enum
        enum: ["aws", "dockerhub"]
        description: registry (dockerhub/AWS ERC)
        default: aws
      ecr_public_registry_id:
        type: string
        description: AWS ECR public registry ID (alias doesn't seem to work for pushing images)
        default: p2m7k1u6
    environment:
      # https://docs.aws.amazon.com/AmazonECR/latest/public/public-registries.html?icmpid=docs_ecr_hp_registry_settings
      # When authenticating to a public registry, always authenticate to the us-east-1 Region when using the AWS CLI.
      AWS_DEFAULT_REGION: us-east-1
      DOCKER_REPO: cloudxlr8r/<< parameters.repo >>
      ECR_REPO: public.ecr.aws/<< parameters.ecr_public_registry_id >>/<< parameters.repo >>
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build and package toolkit
          command: |
            TAG=$CIRCLE_TAG
            if [[ -z $TAG ]]; then
              TAG=$CIRCLE_SHA1
            fi

            docker build -t $DOCKER_REPO:$TAG .
            docker tag "$DOCKER_REPO:$TAG" "$DOCKER_REPO:latest"
            docker tag "$DOCKER_REPO:$TAG" "$ECR_REPO:$TAG"
            docker tag "$DOCKER_REPO:$TAG" "$ECR_REPO:latest"
      - when:
          condition:
            equal: ["aws", << parameters.registry >>]
          steps:
            - aws-cli/setup
            - run:
                name: AWS ECR public login
                # https://docs.aws.amazon.com/AmazonECR/latest/public/public-registries.html?icmpid=docs_ecr_hp_registry_settings
                command: |
                  aws ecr-public get-login-password | docker login --username AWS --password-stdin public.ecr.aws
            - run:
                name: AWS ECR create public repo
                command: |
                  aws ecr-public describe-repositories --repository-names "<< parameters.repo >>" >/dev/null 2>&1 || aws ecr-public create-repository --region --repository-name "<< parameters.repo >>"
            - run:
                name: Publish container to AWS ECR if tagged commit
                command: |
                  TAG=$CIRCLE_TAG
                  if [[ -z $TAG ]]; then
                    TAG=$CIRCLE_SHA1
                  fi
                  docker images && docker push "$ECR_REPO:$TAG" && docker push "$ECR_REPO:latest"
      - when:
          condition:
            equal: ["dockerhub", << parameters.registry >>]
          steps:
            - run:
                name: DockerHub login
                command: echo $DOCKERHUB_PWD | docker login --username $DOCKERHUB_ID --password-stdin
            - run:
                name: Publish container to DockerHub if tagged commit
                command: |
                  TAG=$CIRCLE_TAG
                  if [[ -z $TAG ]]; then
                    TAG=$CIRCLE_SHA1
                  fi
                  docker images && docker push $DOCKERHUB_ID/<< parameters.repo >>:$TAG && docker push cloudxlr8r/<< parameters.repo >>:latest

workflows:
  build-pipeline:
    jobs:
      - lint
      - package:
          name: package-master
          repo: kf-toolkit
          context: org.cloudxlr8r.dockerhub
          filters:
            branches:
              only:
                - master
          requires:
            - lint
      # - package:
      #     name: package-tag-dockerhub
      #     repo: kf-toolkit
      #     registry: dockerhub
      #     context: org.cloudxlr8r.dockerhub
      #     filters:
      #       tags:
      #         only: /^v.*/
      #       branches:
      #         ignore: /.*/
      #     requires:
      #       - lint
      - package:
          name: package-tag-aws
          repo: kf-toolkit
          registry: aws
          # ecr_public_registry: arn:aws:ecr-public::985486441319:repository/kf-toolkit
          # ecr_public_registry: arn:aws:ecr-public::985486441319:repository/kf-toolkit
          ecr_public_registry_id: p2m7k1u6
          context: com.demo.sandbox.ecr
          filters:
            tags:
              only: /^v.*/
            # branches:
            #   ignore: /.*/
          requires:
            - lint
      # - aws-ecr/build-and-push-image:
      #     account-url: AWS_ECR_ACCOUNT_URL_ENV_VAR_NAME
      #     aws-access-key-id: ACCESS_KEY_ID_ENV_VAR_NAME
      #     aws-secret-access-key: SECRET_ACCESS_KEY_ENV_VAR_NAME
      #     context: myContext
      #     create-repo: true
      #     dockerfile: myDockerfile
      #     no-output-timeout: 20m
      #     path: pathToMyDockerfile
      #     profile-name: myProfileName
      #     region: AWS_REGION_ENV_VAR_NAME
      #     repo: myECRRepository
      #     skip-when-tags-exist: false
      #     tag: 'latest,myECRRepoTag'
      #     requires:
      #       - package-tag
